{"version":3,"file":"APIController.js","sourceRoot":"","sources":["../../src/controllers/APIController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response, NextFunction } from 'express';\r\nimport Cryptr from 'cryptr';\r\nimport { get, post, bodyValidator, controller, del, use } from './decorators/index';\r\nimport * as socketio from 'socket.io';\r\nimport { io, redisClient } from '../app';\r\nimport mongoose from 'mongoose';\r\nimport { \r\n\tUser,\r\n\tUsernames,\r\n\tUserWithId,\r\n\tUserWithSave,\r\n\tUserBaseDocument,\r\n\tMsg,\r\n\tMsgWithSave,\r\n\tMsgBaseDocument,\r\n\tChainEmmiter,\r\n\tRequestWithBody,\r\n\tRequestWithParams\r\n} from '../interfaces';\r\nimport { upload, chatAuth, clearUploads } from '../middlewares';\r\n\r\nimport { sids, onlines } from '../app';\r\n\r\nconst Message = mongoose.model('Message');\r\nconst UserModel = mongoose.model('User');\r\nconst cryptr = new Cryptr(process.env.CRYPTR_KEY);\r\n\r\nconst testm = ()=>{\r\n\tconsole.log('test');\r\n}\r\n\r\n@controller('/api')\r\nclass APIController {\r\n\t@get('/messages/all')\r\n\tgetAllMessages(req: Request, res: Response){\r\n\t\tconst options = {\r\n\t\t\tpage: 1,\r\n\t\t\tlimit: 10,\r\n\t\t\tsort: { timeSent: 1 },\r\n\t\t}\r\n\t\tMessage.paginate({}, options, (err, result)=>{\r\n\t\t\tconsole.log(result);\r\n\t\t});\r\n\t\tconst msgRedisKey = `messages`;\r\n\t\ttry{\r\n\t\t\tredisClient.get(msgRedisKey, async (err, messages)=>{\r\n\t\t\t\tif(err) throw err;\r\n\r\n\t\t\t\tif(messages){\r\n\t\t\t\t\tconst data = { source: 'cache', messages: JSON.parse(messages) };\r\n\t\t\t\t\treturn res.statusJson(200, { data: data });\r\n\t\t\t\t}else{\r\n\t\t\t\t\tMessage.find({}, 'message timeSent sender receiver', { lean: true })\r\n\t\t\t\t\t\t.exec()\r\n\t\t\t\t\t\t.then((messages: Msg[])=>{\r\n\t\t\t\t\t\t\tif(!messages){\r\n\t\t\t\t\t\t\t\treturn res.statusJson(404, { data: { message: 'Empty' } });\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tfor(let i = 0; i < messages.length; i++){\r\n\t\t\t\t\t\t\t\tmessages[i].message = cryptr.decrypt(messages[i].message);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tredisClient.setex(msgRedisKey, 3600, JSON.stringify(messages));\r\n\t\t\t\t\t\t\tconst data = { source: 'db', messages: messages };\r\n\t\t\t\t\t\t\treturn res.statusJson(200, { data: data });\r\n\t\t\t\t\t\t}).catch(err=>{\r\n\t\t\t\t\t\t\tconst data = { message: err.messgae };\r\n\t\t\t\t\t\t\tif(err){ return res.statusJson(500, { data: data }); }\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch(err){\r\n\t\t\tconst data = { message: err.messgae };\r\n\t\t\tif(err){ return res.statusJson(500, { data: data }); }\r\n\t\t}\r\n\t}\r\n\r\n\t@get('/messages/all/:sender/:receiver')\r\n\tgetSenderReceiverMessage(req: Request, res: Response){\r\n\t\tconst { sender, receiver } = req.params;\r\n\t\tconst msgRedisKey = `msgs-sender:${sender}-receiver:${receiver}`;\r\n\t\tconst findMesage = ()=>{\r\n\t\t\tMessage.find({ $and: [{'sender': { $in: [sender, receiver] }}, {'receiver': { $in: [sender, receiver] }}] })\r\n\t\t\t\t.exec()\r\n\t\t\t\t.then(async (messages: MsgWithSave[])=>{\r\n\t\t\t\t\tif(!messages){\r\n\t\t\t\t\t\treturn res.statusJson(404, { data: { message: 'Empty' } });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor(let i = 0; i < messages.length; i++){\r\n\t\t\t\t\t\tif(!messages[i].read && messages[i].receiver === sender){\r\n\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t\tmessages[i].read = true;\r\n\t\t\t\t\t\t\t\tmessages[i] = await messages[i].save();\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tcatch(err){\r\n\t\t\t\t\t\t\t\tconst data = { err: err };\r\n\t\t\t\t\t\t\t\tif(err){ return res.statusJson(500, { data: data }); }\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmessages[i].message = cryptr.decrypt(messages[i].message);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tredisClient.setex(msgRedisKey, 3600, JSON.stringify(messages));\r\n\t\t\t\t\tconst data = { source: 'db', messages: messages };\r\n\t\t\t\t\treturn res.statusJson(200, { data: data });\r\n\t\t\t\t}).catch(err=>{\r\n\t\t\t\t\tconst data = { message: err.messgae };\r\n\t\t\t\t\tif(err){ return res.statusJson(500, { data: data }); }\r\n\t\t\t\t});\r\n\t\t}\r\n\t\ttry{\r\n\t\t\tredisClient.get(msgRedisKey, async (err, messages)=>{\r\n\t\t\t\tif(err) throw err;\r\n\r\n\t\t\t\tif(messages){\r\n\t\t\t\t\tconst data = { source: 'cache', messages: JSON.parse(messages) };\r\n\t\t\t\t\treturn res.statusJson(200, { data: data });\r\n\t\t\t\t}else{\r\n\t\t\t\t\tfindMesage();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} catch(err){\r\n\t\t\tconst data = { message: err.messgae };\r\n\t\t\tif(err){ return res.statusJson(500, { data: data }); }\r\n\t\t}\r\n\t}\r\n\r\n\t@post('/message')\r\n\t@bodyValidator('msg', 'sender', 'receiver', 'typeOfMsg')\r\n\tsendMessage(req: RequestWithBody, res: Response){\r\n\t\tconst { body, file } = req;\r\n\t\tconst { msg, sender, receiver, typeOfMsg } = body;\r\n\t\tconst { path } = file;\r\n\r\n\t\tconst receiverInChatroom = (): boolean=>{\r\n\t\t\tlet inChatroom = false;\r\n\t\t\tsids.forEach((usernames: Usernames, id: string)=>{\r\n\t\t      if(usernames.receiver === sender && usernames.sender === receiver) {\r\n\t\t      \tinChatroom = true;\r\n\t\t      }\r\n\t\t    });\r\n\t\t\treturn inChatroom;\r\n\t\t}\r\n\t\tenum MsgTypeEnum {\r\n\t\t\ttext = 'text',\r\n\t\t\tfile = 'file'\r\n\t\t}\r\n\t\t\r\n\t\tconst message: Msg = {\r\n\t\t\tmessage: cryptr.encrypt(msg),\r\n\t\t\tsender: sender,\r\n\t\t\treceiver: receiver,\r\n\t\t\tread: receiverInChatroom(),\r\n\t\t\ttypeOfMsg: MsgTypeEnum[typeOfMsg],\r\n\t    \tfileURL: (file)? path: '',\r\n\t\t};\r\n\r\n\t\tconst chainIO = ({ localIO, socketsToSendTo }: ChainEmmiter ): ChainEmmiter=>{\r\n\t\t\tsids.forEach((usernames: Usernames, id: string)=>{\r\n\t\t      if( (usernames.receiver === receiver && usernames.sender === sender) || (usernames.receiver === sender && usernames.sender === receiver) ) {\r\n\t\t      \tsocketsToSendTo = true;\r\n\t\t      \t//chain rooms based on the users id\r\n\t\t      \tlocalIO = localIO.to(id);\r\n\t\t      }\r\n\t\t    });\r\n\t\t\tonlines.forEach((onlineInfo: OnlineInfo, id: string)=>{\r\n\t\t      if( (onlineInfo.username === receiver) || (onlineInfo.username === sender) ) {\r\n\t\t      \tsocketsToSendTo = true;\r\n\t\t      \t//chain rooms based on the users id\r\n\t\t      \tlocalIO = localIO.to(id);\r\n\t\t      }\r\n\t\t    });\r\n\t\t\treturn { localIO, socketsToSendTo };\r\n\t\t}\r\n\t\tconst emitter = ({ localIO, socketsToSendTo }: ChainEmmiter, dataToSend: { [key: string]: string | Date } ): void=>{\r\n\t\t\tif(socketsToSendTo){\r\n\t\t\t\tlocalIO.emit('send-msg', dataToSend);\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst findUserUpdateConversation = (): void =>{\r\n\t\t\tUserModel.find({'username': { $in: [sender, receiver] }})\r\n\t\t\t\t.exec()\r\n\t\t\t\t.then(async (users: UserWithSave[]): Promise<any>=>{\r\n\t\t\t\t\tif(users.length < 1){\r\n\t\t\t\t\t\treturn res.statusJson(401, { data: { message: 'Not found' } });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor(let i = 0; i < users.length; i++){\r\n\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\tconst localWithWho =  (users[i].username === sender)? receiver: sender;\r\n\t\t\t\t\t\t\tconst localConvos = users[i].conversations;\r\n\t\t\t\t\t\t\tconst receiverConvo: Conversation = { withWho: localWithWho, unreadMsgs: 1 };\r\n\t\t\t\t\t\t\tconst senderConvo: Conversation = { withWho: localWithWho, unreadMsgs: 0 };\r\n\t\t\t\t\t\t\tif(localConvos.length < 1){\r\n\t\t\t\t\t\t\t\tif(users[i].username === receiver){\r\n\t\t\t\t\t\t\t\t\tlocalConvos.push(receiverConvo);\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\tlocalConvos.push(senderConvo);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\tlet convoExist = localConvos.some((convo)=>{\r\n\t\t\t\t\t\t\t\t\treturn convo.withWho === localWithWho;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\tif(!convoExist){\r\n\t\t\t\t\t\t\t\t\tif(users[i].username === receiver){\r\n\t\t\t\t\t\t\t\t\t\tlocalConvos.push(receiverConvo);\r\n\t\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\t\tlocalConvos.push(senderConvo);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\t\tfor(let j = 0; j < localConvos.length; j++){\r\n\t\t\t\t\t\t\t\t\t\tif(localConvos[j].withWho === localWithWho && users[i].username === receiver){\r\n\t\t\t\t\t\t\t\t\t\t\tlocalConvos[j].unreadMsgs += 1;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tusers[i].conversations = localConvos;\r\n\t\t\t\t\t\t\tusers[i] = await users[i].save();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(err){\r\n\t\t\t\t\t\t\tconst data = { err: err };\r\n\t\t\t\t\t\t\tif(err){ return res.statusJson(500, { data: data }); }\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err=>{\r\n\t\t\t\t\tthrow new Error(err);\r\n\t\t\t\t});\r\n\t\t}\r\n\t\tconst deleteCache = (): void =>{\r\n\t\t\tconst msgRedisKeySR = `msgs-sender:${sender}-receiver:${receiver}`;\r\n\t\t\tconst msgRedisKeyRS = `msgs-sender:${receiver}-receiver:${sender}`;\r\n\t\t\tconst msgRedisKeyRRecent = `lstActiveConvo-username:${sender}`;\r\n\t\t\tconst msgRedisKeySRecent = `lstActiveConvo-username:${receiver}`;\r\n\t\t\ttry{\r\n\t\t\t\tredisClient.get(msgRedisKeySR, async (err, messages)=>{\r\n\t\t\t\t\tif(err || messages){redisClient.del(msgRedisKeySR)}\r\n\t\t\t\t});\r\n\t\t\t\tredisClient.get(msgRedisKeyRS, async (err, messages)=>{\r\n\t\t\t\t\tif(err || messages){redisClient.del(msgRedisKeyRS)}\r\n\t\t\t\t});\r\n\t\t\t\tredisClient.get(msgRedisKeyRRecent, async (err, messages)=>{\r\n\t\t\t\t\tif(err || messages){redisClient.del(msgRedisKeyRRecent)}\r\n\t\t\t\t});\r\n\t\t\t\tredisClient.get(msgRedisKeySRecent, async (err, messages)=>{\r\n\t\t\t\t\tif(err || messages){redisClient.del(msgRedisKeySRecent)}\r\n\t\t\t\t});\r\n\t\t\t}catch(err){}\r\n\t\t}\r\n\t\tMessage.create(message).then((newMsg: Msg) => {\r\n\t\t\t//emit only to the sender and the receiver so they both\r\n\t\t\t//can register it on their respoective screens.\r\n\t\t\tdeleteCache();\r\n\t\t\temitter(\r\n\t\t\t\tchainIO({ \r\n\t\t\t\t\tlocalIO: io,\r\n\t\t\t\t\tsocketsToSendTo: false\r\n\t\t\t\t}),\r\n\t\t\t\t{\r\n\t\t\t\t\tmessage: cryptr.decrypt(newMsg['message']),\r\n\t\t\t\t\ttimeSent: newMsg['timeSent'],\r\n\t\t\t\t\tsender: newMsg['sender'],\r\n\t\t\t\t\treceiver: newMsg['receiver'],\r\n\t\t\t\t\t_id: newMsg['_id'],\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t\tfindUserUpdateConversation();\r\n\t\t\tconst data = { success: true };\r\n\t\t\treturn res.statusJson(200, { data: data });\r\n\t\t}).catch(err=>{\r\n\t\t\tconst data = { err: err, success: false };\r\n\t\t\treturn res.statusJson(500, { data: data });\r\n\t\t});\r\n\t}\r\n\r\n\t@get('/messages/recent/:username')\r\n\t@use(testm)\r\n\tgetLastMessagesOfConversations(req: Request, res: Response){\r\n\t\tconst { username } = req.params;\r\n\t\tconst msgRedisKey = `lstActiveConvo-username:${username}`;\r\n\t\ttry{\r\n\t\t\tredisClient.get(msgRedisKey, async (err, messages)=>{\r\n\t\t\t\tif(err) throw err;\r\n\t\t\t\tlet data = {\r\n\t\t\t\t\tsource: '',\r\n\t\t\t\t\tmessages: []\r\n\t\t\t\t}\r\n\t\t\t\tif(JSON.parse(messages)){\r\n\t\t\t\t\tdata.source = 'cache';\r\n\t\t\t\t\tdata.messages = JSON.parse(messages);\r\n\t\t\t\t\treturn res.statusJson(200, { data: data });\r\n\t\t\t\t}else{\r\n\t\t\t\t\tUserModel.findOne({ 'username': username })\r\n\t\t\t\t\t\t.exec()\r\n\t\t\t\t\t\t.then((user: User)=>{\r\n\t\t\t\t\t\t\tlet promises = [];\r\n\t\t\t\t\t\t\tuser.conversations.forEach((convo)=>{\r\n\t\t\t\t\t\t\t\tpromises.push(new Promise<Msg>(async (resolve, reject)=>{\r\n\t\t\t\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\t\t\t\tlet msg: Msg = await Message.findOne({ $and: [{'sender': { $in: [username, convo.withWho] }}, {'receiver': { $in: [username, convo.withWho] }}] }).sort({ timeSent: -1 });\r\n\t\t\t\t\t\t\t\t\t\tmsg.message = cryptr.decrypt(msg.message);\r\n\t\t\t\t\t\t\t\t\t\tresolve(msg);\r\n\t\t\t\t\t\t\t\t\t}catch(err){\r\n\t\t\t\t\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}))\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tPromise.all(promises).then((msg: Msg[])=>{\r\n\t\t\t\t\t\t\t\tdata.source = 'db';\r\n\t\t\t\t\t\t\t\tdata.messages = msg;\r\n\t\t\t\t\t\t\t\tredisClient.setex(msgRedisKey, 3600, JSON.stringify(msg));\r\n\t\t\t\t\t\t\t\treturn res.statusJson(200, { data: data });\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch(err=>{\r\n\t\t\t\t\t\t\tconst data = { message: err.messgae };\r\n\t\t\t\t\t\t\tif(err){ return res.statusJson(500, { data: data }); }\t\t\t\t\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}catch(err){\r\n\t\t\tconst data = { message: err.messgae };\r\n\t\t\tif(err){ return res.statusJson(500, { data: data }); }\r\n\t\t}\r\n\t}\r\n\r\n\t@get('/active-conversations/:username')\r\n\tgetUserActiveConversations(req: Request, res: Response){\r\n\t\tconst { username } = req.params;\r\n\t\tUserModel.findOne({ 'username': username })\r\n\t\t\t\t.exec()\r\n\t\t\t\t.then((user: User)=>{\r\n\t\t\t\t\tif(!user){\r\n\t\t\t\t\t\treturn res.statusJson(203, { data: { message: 'No user!'} });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconst data = {\r\n\t\t\t\t\t\tconversations: user.conversations\r\n\t\t\t\t\t};\r\n\t\t\t\t\treturn res.statusJson(200, { data: data });\r\n\t\t\t\t}).catch(err=>{\r\n\t\t\t\t\tconst data = { err: err };\r\n\t\t\t\t\tif(err){ return res.statusJson(500, { data: data }); }\r\n\t\t\t\t});\r\n\t}\r\n\r\n\t@post('/user/clear-unread')\r\n\t@bodyValidator('sender', 'receiver')\r\n\tclearUserUnreadMsgs(req: RequestWithBody, res: Response){\r\n\t\tconst { sender, receiver } = req.body;\r\n\t\tconst chainIO = ({ localIO, socketsToSendTo }: ChainEmmiter ): ChainEmmiter=>{\r\n\t\t\tsids.forEach((usernames: Usernames, id: string)=>{\r\n\t\t      if( (usernames.receiver === receiver && usernames.sender === sender) || (usernames.receiver === sender && usernames.sender === receiver) ) {\r\n\t\t      \tsocketsToSendTo = true;\r\n\t\t      \t//chain rooms based on the users id\r\n\t\t      \tlocalIO = localIO.to(id);\r\n\t\t      }\r\n\t\t    });\r\n\t\t\tonlines.forEach((onlineInfo: OnlineInfo, id: string)=>{\r\n\t\t      if( (onlineInfo.username === receiver) || (onlineInfo.username === sender) ) {\r\n\t\t      \tsocketsToSendTo = true;\r\n\t\t      \t//chain rooms based on the users id\r\n\t\t      \tlocalIO = localIO.to(id);\r\n\t\t      }\r\n\t\t    });\r\n\t\t\treturn { localIO, socketsToSendTo };\r\n\t\t}\r\n\t\tconst emitter = ({ localIO, socketsToSendTo }: ChainEmmiter, cleared: boolean ): void=>{\r\n\t\t\tif(socketsToSendTo){\r\n\t\t\t\tlocalIO.emit('unread-cleared', { cleared: cleared });\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst deleteCache = (): void =>{\r\n\t\t\tconst msgRedisKeyRRecent = `lstActiveConvo-username:${sender}`;\r\n\t\t\tconst msgRedisKeySRecent = `lstActiveConvo-username:${receiver}`;\r\n\t\t\ttry{\r\n\t\t\t\tredisClient.get(msgRedisKeyRRecent, async (err, messages)=>{\r\n\t\t\t\t\tif(err || messages){redisClient.del(msgRedisKeyRRecent)}\r\n\t\t\t\t});\r\n\t\t\t\tredisClient.get(msgRedisKeySRecent, async (err, messages)=>{\r\n\t\t\t\t\tif(err || messages){redisClient.del(msgRedisKeySRecent)}\r\n\t\t\t\t});\r\n\t\t\t}catch(err){}\r\n\t\t}\r\n\t\tUserModel.findOne({ username: sender })\r\n\t\t\t.exec()\r\n\t\t\t.then(async (user: UserWithSave)=>{\r\n\t\t\t\tif(!user){ return res.statusJson(401, { data: { success: false, message: 'Not found' } }); }\r\n\t\t\t\tfor(let i = 0; i < user.conversations.length; i++){\r\n\t\t\t\t\tif(user.conversations[i].withWho === receiver){\r\n\t\t\t\t\t\tuser.conversations[i].unreadMsgs = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tconst result = await user.save();\r\n\t\t\t\tlet data = { success: false };\r\n\t\t\t\tif(result){\r\n\t\t\t\t\tdata.success = true;\r\n\t\t\t\t}\r\n\t\t\t\temitter(\r\n\t\t\t\t\tchainIO({ \r\n\t\t\t\t\t\tlocalIO: io,\r\n\t\t\t\t\t\tsocketsToSendTo: false\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tdata.success\r\n\t\t\t\t);\r\n\t\t\t\tdeleteCache();\r\n\t\t\t\treturn res.statusJson(200, { data: data });\t\t\t\t\t\r\n\t\t\t}).catch(err=>{\r\n\t\t\t\tconst data = { err: err, success: false };\r\n\t\t\t\treturn res.statusJson(500, { data: data });\r\n\t\t\t})\r\n\t}\r\n\r\n\t@del('/message/:messageId')\r\n\tdeleteMessage(req: RequestWithParams, res: Response){\r\n\t\tconst { messageId } = req.params;\r\n\t\tMessage.findByIdAndRemove(messageId, {}, (err, msgDeleted: Msg)=>{\r\n\t\t\t\t\tconst data = { msgDeleted: msgDeleted, success: true };\r\n\t\t\t\t\tif(err){\r\n\t\t\t\t\t\tconst data = { err: err, success: false };\r\n\t\t\t\t\t\treturn res.statusJson(500, { data: data });\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//console.log(msgDeleted);\r\n\t\t\t\t\t//i changed the structure of this map thats why im getting error\r\n\r\n\t\t\t\t\tlet localIO = io;\r\n\t\t\t\t\tlet socketsToSendTo = false;\r\n\t\t\t\t    sids.forEach((usernames: Usernames, id: string)=>{\r\n\t\t\t\t      if( (usernames.receiver === msgDeleted.receiver && usernames.sender === msgDeleted.sender) || (usernames.receiver === msgDeleted.sender && usernames.sender === msgDeleted.receiver) ) {\r\n\t\t\t\t      \tsocketsToSendTo = true;\r\n\t\t\t\t      \t//chain rooms based on the users id\r\n\t\t\t\t      \tlocalIO = localIO.to(id);\r\n\t\t\t\t      }\r\n\t\t\t\t    });\r\n\t\t\t\t    if(socketsToSendTo){\r\n\t\t\t\t\t\t//emit only to the sender and the receiver so they both\r\n\t\t\t\t\t\t//can register it on their respoective screens.\r\n\t\t\t\t\t\tlocalIO.emit('delete-msg', data);\r\n\t\t\t\t    }\r\n\r\n\t\t\t\t\treturn res.statusJson(200, { data: data });\r\n\t\t\t\t});\r\n\t}\r\n\r\n\t@del('/messages')\r\n\tdeleteMessages(req: Request, res: Response){\r\n\t\tMessage.deleteMany().exec().then(info=>{\r\n\t\t\tconst data = { info: info, success: true };\r\n\t\t\treturn res.statusJson(200, { data: data });\r\n\t\t}).catch(err=>{\r\n\t\t\tconst data = { err: err, success: false };\r\n\t\t\treturn res.statusJson(500, { data: data });\r\n\t\t});\r\n\t}\r\n\r\n\t@get('/messages/reset')\r\n\tresetMessages(req: Request, res: Response){\r\n\t\tMessage.find({})\r\n\t\t\t\t.exec()\r\n\t\t\t\t.then(async (messages: MsgWithSave[])=>{\r\n\t\t\t\t\tif(!messages){\r\n\t\t\t\t\t\treturn res.statusJson(404, { data: { message: 'Empty' } });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tenum MsgTypeEnum {\r\n\t\t\t\t\t\ttext = 'text',\r\n\t\t\t\t\t\tfile = 'file'\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor(let i = 0; i < messages.length; i++){\r\n\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\tmessages[i].typeOfMsg = MsgTypeEnum['text'];\r\n\t\t\t\t\t\t\tmessages[i] = await messages[i].save();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(err){\r\n\t\t\t\t\t\t\tconst data = { err: err };\r\n\t\t\t\t\t\t\tif(err){ return res.statusJson(501, { data: data }); }\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn res.statusJson(200, { data: messages });\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err=>{\r\n\t\t\t\t\tconst data = { err: err };\r\n\t\t\t\t\tif(err){ return res.statusJson(500, { data: data }); }\r\n\t\t\t\t});\r\n\t}\r\n\r\n\t/*@get('/messages/reset')\r\n\tresetMessages(req: Request, res: Response){}*/\r\n\r\n\t@get('/users/conversations/reset')\r\n\tresetUsersConversations(req: Request, res: Response){\r\n\t\tUserModel.find()\r\n\t\t\t\t.exec()\r\n\t\t\t\t.then(async (users: UserWithSave[]): Promise<any>=>{\r\n\t\t\t\t\tif(users.length < 1){\r\n\t\t\t\t\t\treturn res.statusJson(401, { data: { message: 'Not found' } });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tfor(let i = 0; i < users.length; i++){\r\n\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\tusers[i].conversations = [];\r\n\t\t\t\t\t\t\tusers[i] = await users[i].save();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(err){\r\n\t\t\t\t\t\t\tconst data = { err: err };\r\n\t\t\t\t\t\t\tif(err){ return res.statusJson(500, { data: data }); }\r\n\t\t\t\t\t\t}\t\t\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn res.statusJson(200, { data: { message: 'Done' } });\r\n\t\t\t\t})\r\n\t\t\t\t.catch(err=>{\r\n\t\t\t\t\tthrow new Error(err);\r\n\t\t\t\t});\r\n\t}\r\n}"]}